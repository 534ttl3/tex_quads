* tex_quads
The first idea is to create another animation engine, so that I can put my own spin on mathematical visualization (maybe similar to [[https://github.com/3b1b/manim][manim]]).
Afer early attempts at building [[https://github.com/ctschnur/first-graphics-engine][my own rendering engine]] in ~C++~, I am for now basing this on the much more complete [[https://github.com/panda3d/panda3d][panda3d]] game engine (initially developed by Disney, written in ~C++~, having DirectX and OpenGL backends and python bindings).

So far, the functionality is still pretty basic. This is a sample (for what it's worth): 
[[file:screenshots/Peek3.gif]]

This program can also display ~LaTeX~ equations on-screen. One long term goal is to enable computer-assisted manipulation of mathematical expressions and parallel visualization. 

* Installation
- Clone this repository
- Create a =virtualenv= (e.g. named =venv=) with =python3=, (e.g. in your current folder =.=, the project's root folder): 
#+BEGIN_SRC sh
python3 -m venv .
#+END_SRC

- Activate the virtual environment, e.g.
#+BEGIN_SRC sh
source ./bin/activate
#+END_SRC

- install the dependencies listed in =requirements.txt=
#+BEGIN_SRC sh
pip install -r ./requirements.txt
#+END_SRC

* Notes
** Branched Podcast Idea
*** DONE Plot a parametric curve
**** TODO Plot a dashed parametric curve
Think about how to plot this in a reasonable way (or compare with how matplotlib does it, it actually bends dashes over the corners of a line going through a point). I could try to extend my createColoredParametricDashedCurveGeomNode, but it seems pretty complicated, and I sunk already too much time into that. 
**** TODO Plot differently colored parametric curves
*** Plot a bezier curve
*** implement coulomb repulsion of particles with strong damping
*** map an mp3 file along a bezier curve
** deferred tasks
*** DEFERRED Plot the Bloch sphere
*** DEFERRED triangulation of latex characters
Probe, at what complexity the p3d triangulation breaks. To decrease the complexity (geometry simplification) and check for intersections of hole polygon with boundary polygon, use the shapely library.

*** DEFERRED Make rectangle class
**** DONE draw a rectangle made of lines
**** DEFERRED Make it automatically encompass things
**** Implement a 'scene2d' type class
- to plot a coordinate system in (and fit inside the viewport)
- properties: 
  - default height and width
  - default anchor point
  - background color
  - white frame
  - function to fit stuff in it

** possilbe optimizations
*** MAYBE Draw a black circle and black dot as part of the Cone tip
*** MAYBE Figure out how to make an object keep facing the camera, keeping it's local origin fixed
*** MAYBE create the shaded triangulated Cone procedurally instead of loading it from a model file
(see e.g. https://github.com/intel-isl/Open3D/blob/ebaa197c135c7055710503d47d389526eb7ed580/src/Open3D/Geometry/TriangleMeshFactory.cpp)
*** MAYBE calculate surface normals manually for the cone (for flat shading)
