* tex_quads
The first idea is to create another animation engine, so that I can put my own spin on mathematical visualization (maybe similar to [[https://github.com/3b1b/manim][manim]]).
Afer early attempts at building [[https://github.com/ctschnur/first-graphics-engine][my own rendering engine]] in ~C++~, I am for now basing this on the much more complete [[https://github.com/panda3d/panda3d][panda3d]] game engine (initially developed by Disney, written in ~C++~, having DirectX and OpenGL backends and python bindings).

So far, the functionality is still pretty basic. This is a sample (3d interactive Bezier Curves and extrusion of a parametric curve): 
[[file:screenshots/Peek4.gif]]

This program can also display ~LaTeX~ equations on-screen. One long term goal is to enable computer-assisted manipulation of mathematical expressions and parallel visualization. 

* Installation
- Clone this repository
- Create a =virtualenv= (e.g. named =venv=) with =python3=, (e.g. in your current folder =.=, the project's root folder): 
#+BEGIN_SRC sh
python3 -m venv .
#+END_SRC

- Activate the virtual environment, e.g.
#+BEGIN_SRC sh
source ./bin/activate
#+END_SRC

- install the dependencies listed in =requirements.txt=
#+BEGIN_SRC sh
pip install -r ./requirements.txt
#+END_SRC

* Notes
** Branched Podcast Idea
*** DONE Plot a parametric curve
*** DONE Make blender-like side, top, front view (map to number keys)
*** DONE Plot a dashed parametric curve
*** DONE Draw 2d bezier curve with handles
*** DONE implement on-hover highlighting of a particular bezier curve 
**** TODO implement collision detection for a parametric curve
- Naive idea: procedurally create a smooth, invisible tube-like object (extrusion) around a parametric curve and test for ray collision with the cursor
Strategy:
- pick the curve
  - advance in +equidistant path-length+ segments along the path of a smooth continuous curve and at each point
    - plot a point (1.)
    - plot a circle (2.)
    - +find the basis of unit vectors at each point of the path (t_vec points along the tangent, n_vec points along the direction of max. radius of curvature (see e.g. [[https://de.wikipedia.org/wiki/Frenetsche_Formeln#Frenetsche_Formeln_in_Abh%C3%A4ngigkeit_von_anderen_Parametern][Frenet-Serret formulas]], with $s=t$) and b_vec = t_vec cross n_vec) and plot it+
    - the tangent vector and connected the circles to a tube as they were laying
    - plot the circle so that it's first point is connected to the (saved) first point of the last circle (last_circle_first_point_vec)
    - bulid the triangle mesh in a for loop (always accessing the last circle's coordinates last_circle_coords)

Fixable Problems: 
- the tube folds over when the curvature becomes much larger than the distance between two segments. +To make the internal rotation of the circles (that are connected to each other) more consistent, one could always rotate the first point of the circle to lie along the curvature vector or opposite from it directly after the curvature switches.+ 

alter the position of the cursor along the path by dragging horizontally (horizontal dragging distance maps to path length advancement at first, with quadratic increase in dragging speed when the dragging accelerates)

*** implement coulomb repulsion of particles with strong damping
*** map an mp3 file along a bezier curve
** deferred tasks
*** DEFERRED Plot the Bloch sphere
*** DEFERRED triangulation of latex characters
Probe, at what complexity the p3d triangulation breaks. To decrease the complexity (geometry simplification) and check for intersections of hole polygon with boundary polygon, use the shapely library.

*** DEFERRED Make rectangle class
**** DONE draw a rectangle made of lines
**** DEFERRED Make it automatically encompass things
**** Implement a 'scene2d' type class
- to plot a coordinate system in (and fit inside the viewport)
- properties: 
  - default height and width
  - default anchor point
  - background color
  - white frame
  - function to fit stuff in it

** possilbe optimizations
*** MAYBE Draw a black circle and black dot as part of the Cone tip
*** MAYBE Figure out how to make an object keep facing the camera, keeping it's local origin fixed
*** MAYBE create the shaded triangulated Cone procedurally instead of loading it from a model file
(see e.g. https://github.com/intel-isl/Open3D/blob/ebaa197c135c7055710503d47d389526eb7ed580/src/Open3D/Geometry/TriangleMeshFactory.cpp)
*** MAYBE calculate surface normals manually for the cone (for flat shading)
